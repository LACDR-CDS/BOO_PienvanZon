#
head(colnames(countData))
head(metaData$sample_ID)
#
head(colnames(countData))
#
head(colnames(countData))
head(metaData$sample_ID)
#
head(colnames(countData))
head(metaData$sample_ID)
library(tibble)
countData <- column_to_rownames(countData, var = "Probe")
library(tibble)
countData <- column_to_rownames(countData, var = "Probe")
library(tibble)
countData <- column_to_rownames(countData, var = "Probe_ID")
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#
all(colnames(countData) == metaData$sample_ID)
library(tibble)
countData <- column_to_rownames(countData, var = "Probe_ID")
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
View(metaData)
View(countData)
sum(countData$CS1119_C1_P4_R1)
#
save(countData, file.path(root_dir, "output/countData_01exploration.Rdata"))
root_dir
setwd("C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO")
file.path(root_dir, "output/countData_01exploration.Rdata")
#
save(countData, file.path(root_dir, "output/countData_01exploration.Rdata"))
countData
?save
#
save(countData, file.path(root_dir, "output/countData_01exploration.RData"))
ls()
setwd("C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO")
ls()
list.dirs()
#
save(countData, file.path(root_dir, "output/countData_01exploration.RData"))
#
save( file.path(root_dir, "output/countData_01exploration.RData"), countData)
file.path(root_dir, "output/countData_01exploration.RData")
#
save(countData, file=
file.path(root_dir, "output/countData_01exploration.RData"))
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
View(countData_filtered)
View(manifestData)
dim(manifestData)
dim(annotated_manifest)
rownames(countData)
annotated_manifest$Probe
annotated_manifest$probe_name
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
dim(annotated_manifest)
dim(count)
dim(countData_filtered)
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "Probe")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe_name")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#putting manifestData in the same order as countData
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
# check if the data is orderend the same
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
rownames(countData_filtered) <- annotated_manifest_ordered$probe_name
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#putting manifestData in the same order as countData
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
# check if the data is orderend the same
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
countData_filtered
#
dim(countData)
dim(countData_filtered)
#
dim(manifestData)
dim(annotated_manifest)
# Ik kan edgeR niet downloaden
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
all(rownames(cpmData) %in% annotated_manifest$Probe)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
all(rownames(cpmData) %in% annotated_manifest$Probe)
all(rownames(cpmData) %in% annotated_manifest$Probe)
rm(list=ls())
root_dir <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO//"
cpm_path <- file.path(root_dir, "output", "cpmData_03_sampleQC.RData")
# Count data is loaded in here because this analysis results in us removing the top concentration samples
# This may not be the case in your experiment :) MOET IK DIT DOEN?
count_path <- file.path(root_dir, "output/countData_03_sampleQC.RData")
metadata_path <- file.path(root_dir, "output", "metaData_03_sampleQC.RData")
library(tidyverse)
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
install.packages("complexheatmap")
library(tidyverse)
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
load(cpm_path)
load(count_path)
load(metadata_path)
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
pcs
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
View(pcs)
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
View(pcs)
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
pcs
# Calculate PCs that capture the variance within CPM data
pcs <- prcomp(t(cpmData))
# Summarize PCs
summary(pcs)
# Calculate variance explained
var_explained =
data.frame(PC = 1:nrow(metaData),
var_explained = round(pcs$sdev^2 / sum(pcs$sdev^2), 3))
# Inspect
var_explained
var_explained %>%
# Subset variance explained to include only the first 20 PCs
filter(PC <= 20) %>%
# Plot PC against variance explained
ggplot(aes(x = PC, y = var_explained)) +
# Draw a line between points
geom_line(color = "grey40") +
# Draw points for each PC
geom_point(color = "grey40", fill = 'lightblue', shape = 21, size = 3) +
# Label x axis at integer values between 1 and 20
scale_x_continuous(breaks = c(seq(1,20))) +
xlab("Principal Component") +
ylab("Proportion of variance explained") +
ggtitle("Screeplot of the first 20 PCs") +
theme_bw() +
theme(axis.text.x = element_text(size = 8))
var_explained %>%
# Subset variance explained to include only the first 20 PCs
filter(PC <= 20) %>%
# Plot PC against variance explained
ggplot(aes(x = PC, y = var_explained)) +
# Draw a line between points
geom_line(color = "grey40") +
# Draw points for each PC
geom_point(color = "grey40", fill = 'lightblue', shape = 21, size = 3) +
# Label x axis at integer values between 1 and 20
scale_x_continuous(breaks = c(seq(1,20))) +
geom_hline(yintercept = 0.01, linetype = "dashed", color = "red") +
xlab("Principal Component") +
ylab("Proportion of variance explained") +
ggtitle("Screeplot of the first 20 PCs") +
theme_bw() +
theme(axis.text.x = element_text(size = 8))
# Add first 9 PCs to metadata
metaData <- cbind(metaData, pcs$x[,1:9])
View(metaData)
# Calculate the SD of each column in metadata
plot_vars <- apply(metaData, 2, function(x) sd(as.numeric(factor(x)), na.rm=T))
# Save column names that vary (SD is not NA or 0)
plot_vars <- names(plot_vars[!plot_vars %in% c(NA, 0)])
# Remove PC column names
plot_vars <- plot_vars[!grepl("PC", plot_vars)]
# Inspect
plot_vars
# Subset metadata to include only these columns
heatmap_df <- metaData %>%
select(any_of(plot_vars))
View(metaData)
# Convert all variables to numeric values
heatmap_df <- apply(heatmap_df, 2, function(x) as.numeric(factor(x)))
# Calculate correlations between the first 10 PCs and these numeric variables scaled
cxy <- round(cor(pcs$x[,1:10], scale(heatmap_df),
use = "pairwise.complete.obs"), 2)
# Inspect
as.data.frame(cxy)
# Create a colour scale from -1 to 1 for the heatmap
col_fun <- colorRamp2(c(-1, 0, 1), c("#008080", "white", "#b3002d"))
# Create a heatmap
Heatmap(
t(cxy),
# Use the colour palette
col = col_fun,
border = 'grey5',
# Cluster the variables but not the PCs
cluster_columns = FALSE,
show_row_dend = TRUE,
show_column_dend = FALSE,
# Set name of legend
name = "Corr",
# Format text
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# Print correlation if it is above 0.4
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
metaData %>%
# Plot PC2 against PC5
ggplot(aes(x = PC2, y = PC5,
# Coloured by compound class and with different shapes for each plate
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
# Set labels
labs(x = paste0("PC2 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC5 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
# Convert all variables to numeric values
heatmap_df <- apply(heatmap_df, 2, function(x) as.numeric(factor(x)))
# Calculate correlations between the first 9 PCs and these numeric variables scaled
cxy <- round(cor(pcs$x[,1:9], scale(heatmap_df),
use = "pairwise.complete.obs"), 2)
# Inspect
as.data.frame(cxy)
# Create a colour scale from -1 to 1 for the heatmap
col_fun <- colorRamp2(c(-1, 0, 1), c("#008080", "white", "#b3002d"))
# Create a heatmap
Heatmap(
t(cxy),
# Use the colour palette
col = col_fun,
border = 'grey5',
# Cluster the variables but not the PCs
cluster_columns = FALSE,
show_row_dend = TRUE,
show_column_dend = FALSE,
# Set name of legend
name = "Corr",
# Format text
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# Print correlation if it is above 0.4
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
# Subset metadata to include only these columns
heatmap_df <- metaData %>%
select(any_of(plot_vars))
# Convert all variables to numeric values
heatmap_df <- apply(heatmap_df, 2, function(x) as.numeric(factor(x)))
# Calculate correlations between the first 9 PCs and these numeric variables scaled
cxy <- round(cor(pcs$x[,1:9], scale(heatmap_df),
use = "pairwise.complete.obs"), 2)
# Inspect
as.data.frame(cxy)
# Create a colour scale from -1 to 1 for the heatmap
col_fun <- colorRamp2(c(-1, 0, 1), c("#008080", "white", "#b3002d"))
# Create a heatmap
Heatmap(
t(cxy),
# Use the colour palette
col = col_fun,
border = 'grey5',
# Cluster the variables but not the PCs
cluster_columns = FALSE,
show_row_dend = TRUE,
show_column_dend = FALSE,
# Set name of legend
name = "Corr",
# Format text
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# Print correlation if it is above 0.4
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
metaData %>%
# Plot PC2 against PC5
ggplot(aes(x = PC2, y = PC5,
# Coloured by compound class and with different shapes for each plate
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
# Set labels
labs(x = paste0("PC2 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC5 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# Plot PC2 against PC5
ggplot(aes(x = PC2, y = PC5,
# Coloured by compound class and with different shapes for each plate
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
# Set labels
labs(x = paste0("PC2 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC5 (", round(100*var_explained[5,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
save(metaData, file=paste0(root_dir, "metaData.Rdata"))
save(countData, file=paste0(root_dir, "countData.Rdata"))
save(cpmData, file=paste0(root_dir, "cpmData.Rdata"))
# This clears the environment
rm(list=ls())
root_dir <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO//"
count_path <- "countData.Rdata"
metadata_path <- "metaData.Rdata"
low_store <- "DEG/DEGres_low.Rdata"
high_store <- "DEG/DEGres_high.Rdata"
# This loads the packages
library(tidyverse)
library(ggrepel)
library(DESeq2)
install.packages("DESeq2")
# This loads the packages
library(tidyverse)
library(ggrepel)
library(DESeq2)
# This loads the packages
library(tidyverse)
library(ggrepel)
BiocManager::install("DESeq2")
