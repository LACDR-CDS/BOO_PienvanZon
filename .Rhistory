#
librarby(tidyverse)
library(ggrepel)
#
library(tidyverse)
library(ggrepel)
#
library(tidyverse)
library(ggrepel)
install.packages("ggrepel")
#
library(tidyverse)
library(ggrepel)
#This is where the data comes from, thus the input folder
root_dir <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/"
count_path <- file.path(root_dir, "input", "countData.txt")
metadata_path <- file.path(root_dir, "input", "metaData.txt")
manifest_path <- file.path(root_dir, "input", "Human Whole Transcriptome 2.1 Probe Manifest.xlsx")
#This is were I want to store my output, thus in the output folder
count_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
cpm_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
metadata_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
count_threshold <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
corr_threshold <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
#
countData <- read.csv(count_path)
CMPData <- read.csv(cmp_path)
#
colnames(countData)
head(countData)
colnames(metaData)
#
colnames(countData)
head(countData)
colnames(metaData)
#
countData <- read.csv(count_path)
metaData <- read.csv(metadata_path)
CMPData <- read.csv(cmp_path)
#
colnames(countData)
head(countData)
colnames(metaData)
head(metaData)
#
colnames(countData)
colnames(metaData)
#
colnames(countData)
table(countData)
colnames(metaData)
#
colnames(countData)
table(countData)
colnames(metaData)
#
colnames(countData)
colnames(metaData)
# Ik kan edgeR niet downloaden
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#
library(tidyverse)
library(readxl)
# This is where the data comes from, thus the input folder
root_dir <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/"
count_path <- file.path(root_dir, "input", "countData.txt")
metadata_path <- file.path(root_dir, "input", "metaData.txt")
manifest_path <- file.path(root_dir, "input", "Human Whole Transcriptome 2.1 Probe Manifest.xlsx")
# This is were I want to store my output, thus in the output folder
count_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
cpm_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
metadata_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
probedata_store <- "C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO/output/"
#
# This reads the count data
countData <- read_tsv(count_path)
# This shows al the count data
str(countData)
#This reads the data from my file
metaData <- read_tsv(metadata_path)
#This shows the metaDat
str(metaData)
# The data from the manifest
manifestData <- read_xlsx(manifest_path)
#This shows the data form the manifest
str(manifestData)
#
colnames(manifestData)
# The output of this code is 0, which means that there is no difference in the probes in both datasets.
missing_annotations <- setdiff(countData$Probe, manifestData$probe_name_old)
missing_annotations
# This gives the number of probes that are not annotated. These probes can no longer match to genes.Because they have no information we should remove them from further analysis.
sum(is.na(manifestData$gene_symbol))
# There are 608 gene annotations that are updated in the manifest. So 608 gene annotations do not match.
sum(manifestData$gene_symbol != manifestData$gene_symbol_old, na.rm = TRUE)
#This tells us that we should remove probes which have no annotation, rename probes that have different names for gene and old genes. We should keep the probes of which the gene symbol matches the old gene symbol.
library(dplyr)
manifestData <- manifestData %>%
mutate(flag_realignment = case_when(
is.na(gene_symbol) ~ "remove",
gene_symbol != gene_symbol_old ~ "rename",
gene_symbol == gene_symbol_old ~ "keep"
))
manifestData
table(manifestData$flag_realignment)
# There are 21930 probes that have a correct annotations, and thus stay in the countData.
valid_probes <- countData$Probe[!is.na(manifestData$gene_symbol)]
str(valid_probes)
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
rownames(countData_filtered) <- annotated_manifest_ordered$probe_name
countData_filtered
#
dim(countData)
dim(countData_filtered)
#
dim(manifestData)
dim(annotated_manifest)
# Ik kan edgeR niet downloaden
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
total_cpm
# Ik kan edgeR niet downloaden
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
View(countData_filtered)
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
rownames(countData_filtered) <- annotated_manifest_ordered$probe_name
countData_filtered
table(is.na(probeManifest$gene_symbol))
table(is.na(manifestData$gene_symbol))
table(is.na(manifestData$gene_symbol))
head(rownames(countData_filtered))
head(ManifestData$Probe)
table(is.na(manifestData$gene_symbol))
head(rownames(countData_filtered))
head(ManifestData$Probe)
table(is.na(manifestData$gene_symbol))
head(rownames(countData_filtered))
head(manifestData$Probe)
table(is.na(manifestData$gene_symbol))
head(rownames(countData_filtered))
head(manifestData$Probe_ID)
table(is.na(manifestData$gene_symbol))
head(rownames(countData_filtered))
head(manifestData$probe_ID)
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
countData_filtered <- column_to_rownames(countData_filtered, var = "probe_ID")
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
countData_filtered <- column_to_rownames(countData_filtered, var = "probe_ID")
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
rownames(countData_filtered) <- annotated_manifest_ordered$probe_name
countData_filtered
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
countData_filtered <- column_to_rownames(countData_filtered, var = "probe_ID")
# Snap deze niet zo goed
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
View(manifestData)
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
#probe column as rownames
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
#
head(colnames(countData))
head(metaData$sample_ID)
#
head(colnames(countData))
#
head(colnames(countData))
head(metaData$sample_ID)
#
head(colnames(countData))
head(metaData$sample_ID)
library(tibble)
countData <- column_to_rownames(countData, var = "Probe")
library(tibble)
countData <- column_to_rownames(countData, var = "Probe")
library(tibble)
countData <- column_to_rownames(countData, var = "Probe_ID")
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#
all(colnames(countData) == metaData$sample_ID)
library(tibble)
countData <- column_to_rownames(countData, var = "Probe_ID")
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
# looking at the columns of countData and the sample ID's. Do they match? They don't match because probe is also a colunm, it had to be transformed to a rowname (above, but error)???
head(colnames(countData))
head(metaData$sample_ID)
#Check if the order matches. True, it matches!
all(colnames(countData) == metaData$sample_ID)
View(metaData)
View(countData)
sum(countData$CS1119_C1_P4_R1)
#
save(countData, file.path(root_dir, "output/countData_01exploration.Rdata"))
root_dir
setwd("C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO")
file.path(root_dir, "output/countData_01exploration.Rdata")
#
save(countData, file.path(root_dir, "output/countData_01exploration.Rdata"))
countData
?save
#
save(countData, file.path(root_dir, "output/countData_01exploration.RData"))
ls()
setwd("C:/Users/pienz/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Pien/project/pienvanzon_BOO")
ls()
list.dirs()
#
save(countData, file.path(root_dir, "output/countData_01exploration.RData"))
#
save( file.path(root_dir, "output/countData_01exploration.RData"), countData)
file.path(root_dir, "output/countData_01exploration.RData")
#
save(countData, file=
file.path(root_dir, "output/countData_01exploration.RData"))
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$Probe, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
View(countData_filtered)
View(manifestData)
dim(manifestData)
dim(annotated_manifest)
rownames(countData)
annotated_manifest$Probe
annotated_manifest$probe_name
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
dim(annotated_manifest)
dim(count)
dim(countData_filtered)
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "Probe")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#probe column as rownames -> krijg hier een error? wat klopt er niet???
countData_filtered <- column_to_rownames(countData_filtered, var = "probe_name")
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#putting manifestData in the same order as countData
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
# check if the data is orderend the same
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
rownames(countData_filtered) <- annotated_manifest_ordered$probe_name
# making a new column, probe_name
manifestData <- manifestData %>%
mutate(probe_name = paste0(gene_symbol, "_", probe_ID))
#selecting only the annotated probes
annotated_manifest <- manifestData %>%
filter(!is.na(gene_symbol))
#Also countData must be filtered for only annotated probes
countData_filtered <- countData[rownames(countData) %in% annotated_manifest$probe_name, ]
#putting manifestData in the same order as countData
annotated_manifest_ordered <- annotated_manifest[match(rownames(countData_filtered), annotated_manifest$Probe), ]
# check if the data is orderend the same
stopifnot(all(annotated_manifest_ordered$Probe == rownames(countData_filtered)))
countData_filtered
#
dim(countData)
dim(countData_filtered)
#
dim(manifestData)
dim(annotated_manifest)
# Ik kan edgeR niet downloaden
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
if (!requireNamespace("edgeR", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install("edgeR")
}
library(edgeR)
count_matrix <- as.matrix(countData_filtered)
count_matrix
cpmData <- edgeR::cpm(count_matrix)
#
total_cpm <- rowSums(cpmData)
average_cpm <- rowMeans(cpmData)
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
#
total_cpm <- rowSums(cpmData)
total_cpm
average_cpm <- rowMeans(cpmData)
average_cpm
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
top_genes
manifestData <- manifestData %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- manifestData %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
all(rownames(cpmData) %in% annotated_manifest$Probe)
annotated_manifest <- annotated_manifest %>%
mutate(
total_cpm = total_cpm[match(probe_ID, rownames(cpmData))],
average_cpm = average_cpm[match(probe_ID, rownames(cpmData))]
)
top_genes <- annotated_manifest %>%
arrange(desc(average_cpm)) %>%
select(gene_symbol, probe_ID, average_cpm, total_cpm)
print(top_genes)
all(rownames(cpmData) %in% annotated_manifest$Probe)
all(rownames(cpmData) %in% annotated_manifest$Probe)
